// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "user.pb.h"
// @@protoc_insertion_point(includes)

namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class HTTPResponse;

// ===================================================================

class HTTPResponse : public ::google::protobuf::Message {
 public:
  HTTPResponse();
  virtual ~HTTPResponse();

  HTTPResponse(const HTTPResponse& from);

  inline HTTPResponse& operator=(const HTTPResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HTTPResponse& default_instance();

  void Swap(HTTPResponse* other);

  // implements Message ----------------------------------------------

  HTTPResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HTTPResponse& from);
  void MergeFrom(const HTTPResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .user.RegiestResponse regiest_response = 4;
  inline bool has_regiest_response() const;
  inline void clear_regiest_response();
  static const int kRegiestResponseFieldNumber = 4;
  inline const ::user::RegiestResponse& regiest_response() const;
  inline ::user::RegiestResponse* mutable_regiest_response();
  inline ::user::RegiestResponse* release_regiest_response();
  inline void set_allocated_regiest_response(::user::RegiestResponse* regiest_response);

  // @@protoc_insertion_point(class_scope:data.HTTPResponse)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_regiest_response();
  inline void clear_has_regiest_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 code_;
  bool success_;
  ::std::string* msg_;
  ::user::RegiestResponse* regiest_response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();

  void InitAsDefaultInstance();
  static HTTPResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// HTTPResponse

// optional int32 code = 1;
inline bool HTTPResponse::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HTTPResponse::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HTTPResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HTTPResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 HTTPResponse::code() const {
  return code_;
}
inline void HTTPResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional bool success = 2;
inline bool HTTPResponse::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HTTPResponse::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HTTPResponse::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HTTPResponse::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool HTTPResponse::success() const {
  return success_;
}
inline void HTTPResponse::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// optional string msg = 3;
inline bool HTTPResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HTTPResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HTTPResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HTTPResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& HTTPResponse::msg() const {
  return *msg_;
}
inline void HTTPResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void HTTPResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void HTTPResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HTTPResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* HTTPResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void HTTPResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .user.RegiestResponse regiest_response = 4;
inline bool HTTPResponse::has_regiest_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HTTPResponse::set_has_regiest_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HTTPResponse::clear_has_regiest_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HTTPResponse::clear_regiest_response() {
  if (regiest_response_ != NULL) regiest_response_->::user::RegiestResponse::Clear();
  clear_has_regiest_response();
}
inline const ::user::RegiestResponse& HTTPResponse::regiest_response() const {
  return regiest_response_ != NULL ? *regiest_response_ : *default_instance_->regiest_response_;
}
inline ::user::RegiestResponse* HTTPResponse::mutable_regiest_response() {
  set_has_regiest_response();
  if (regiest_response_ == NULL) regiest_response_ = new ::user::RegiestResponse;
  return regiest_response_;
}
inline ::user::RegiestResponse* HTTPResponse::release_regiest_response() {
  clear_has_regiest_response();
  ::user::RegiestResponse* temp = regiest_response_;
  regiest_response_ = NULL;
  return temp;
}
inline void HTTPResponse::set_allocated_regiest_response(::user::RegiestResponse* regiest_response) {
  delete regiest_response_;
  regiest_response_ = regiest_response;
  if (regiest_response) {
    set_has_regiest_response();
  } else {
    clear_has_regiest_response();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
