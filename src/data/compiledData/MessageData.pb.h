// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageData.proto

#ifndef PROTOBUF_MessageData_2eproto__INCLUDED
#define PROTOBUF_MessageData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MessageData {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageData_2eproto();
void protobuf_AssignDesc_MessageData_2eproto();
void protobuf_ShutdownFile_MessageData_2eproto();

class Message_Info;

// ===================================================================

class Message_Info : public ::google::protobuf::Message {
 public:
  Message_Info();
  virtual ~Message_Info();

  Message_Info(const Message_Info& from);

  inline Message_Info& operator=(const Message_Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message_Info& default_instance();

  void Swap(Message_Info* other);

  // implements Message ----------------------------------------------

  Message_Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message_Info& from);
  void MergeFrom(const Message_Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 message_id = 1;
  inline bool has_message_id() const;
  inline void clear_message_id();
  static const int kMessageIdFieldNumber = 1;
  inline ::google::protobuf::int32 message_id() const;
  inline void set_message_id(::google::protobuf::int32 value);

  // optional int32 sender_id = 2;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::int32 sender_id() const;
  inline void set_sender_id(::google::protobuf::int32 value);

  // optional int32 recipient_id = 3;
  inline bool has_recipient_id() const;
  inline void clear_recipient_id();
  static const int kRecipientIdFieldNumber = 3;
  inline ::google::protobuf::int32 recipient_id() const;
  inline void set_recipient_id(::google::protobuf::int32 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string title = 6;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 6;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional int32 file_id = 7;
  inline bool has_file_id() const;
  inline void clear_file_id();
  static const int kFileIdFieldNumber = 7;
  inline ::google::protobuf::int32 file_id() const;
  inline void set_file_id(::google::protobuf::int32 value);

  // optional int32 room_id = 8;
  inline bool has_room_id() const;
  inline void clear_room_id();
  static const int kRoomIdFieldNumber = 8;
  inline ::google::protobuf::int32 room_id() const;
  inline void set_room_id(::google::protobuf::int32 value);

  // optional string time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // optional bool status = 10;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 10;
  inline bool status() const;
  inline void set_status(bool value);

  // @@protoc_insertion_point(class_scope:MessageData.Message_Info)
 private:
  inline void set_has_message_id();
  inline void clear_has_message_id();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_recipient_id();
  inline void clear_has_recipient_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_file_id();
  inline void clear_has_file_id();
  inline void set_has_room_id();
  inline void clear_has_room_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 message_id_;
  ::google::protobuf::int32 sender_id_;
  ::google::protobuf::int32 recipient_id_;
  ::google::protobuf::int32 type_;
  ::std::string* content_;
  ::std::string* title_;
  ::google::protobuf::int32 file_id_;
  ::google::protobuf::int32 room_id_;
  ::std::string* time_;
  bool status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_MessageData_2eproto();
  friend void protobuf_AssignDesc_MessageData_2eproto();
  friend void protobuf_ShutdownFile_MessageData_2eproto();

  void InitAsDefaultInstance();
  static Message_Info* default_instance_;
};
// ===================================================================


// ===================================================================

// Message_Info

// optional int32 message_id = 1;
inline bool Message_Info::has_message_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message_Info::set_has_message_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message_Info::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message_Info::clear_message_id() {
  message_id_ = 0;
  clear_has_message_id();
}
inline ::google::protobuf::int32 Message_Info::message_id() const {
  return message_id_;
}
inline void Message_Info::set_message_id(::google::protobuf::int32 value) {
  set_has_message_id();
  message_id_ = value;
}

// optional int32 sender_id = 2;
inline bool Message_Info::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message_Info::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message_Info::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message_Info::clear_sender_id() {
  sender_id_ = 0;
  clear_has_sender_id();
}
inline ::google::protobuf::int32 Message_Info::sender_id() const {
  return sender_id_;
}
inline void Message_Info::set_sender_id(::google::protobuf::int32 value) {
  set_has_sender_id();
  sender_id_ = value;
}

// optional int32 recipient_id = 3;
inline bool Message_Info::has_recipient_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Message_Info::set_has_recipient_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Message_Info::clear_has_recipient_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Message_Info::clear_recipient_id() {
  recipient_id_ = 0;
  clear_has_recipient_id();
}
inline ::google::protobuf::int32 Message_Info::recipient_id() const {
  return recipient_id_;
}
inline void Message_Info::set_recipient_id(::google::protobuf::int32 value) {
  set_has_recipient_id();
  recipient_id_ = value;
}

// optional int32 type = 4;
inline bool Message_Info::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Message_Info::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Message_Info::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Message_Info::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Message_Info::type() const {
  return type_;
}
inline void Message_Info::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string content = 5;
inline bool Message_Info::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Message_Info::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Message_Info::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Message_Info::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Message_Info::content() const {
  return *content_;
}
inline void Message_Info::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message_Info::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message_Info::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message_Info::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Message_Info::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message_Info::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string title = 6;
inline bool Message_Info::has_title() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Message_Info::set_has_title() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Message_Info::clear_has_title() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Message_Info::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& Message_Info::title() const {
  return *title_;
}
inline void Message_Info::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Message_Info::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void Message_Info::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message_Info::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* Message_Info::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message_Info::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 file_id = 7;
inline bool Message_Info::has_file_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Message_Info::set_has_file_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Message_Info::clear_has_file_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Message_Info::clear_file_id() {
  file_id_ = 0;
  clear_has_file_id();
}
inline ::google::protobuf::int32 Message_Info::file_id() const {
  return file_id_;
}
inline void Message_Info::set_file_id(::google::protobuf::int32 value) {
  set_has_file_id();
  file_id_ = value;
}

// optional int32 room_id = 8;
inline bool Message_Info::has_room_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Message_Info::set_has_room_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Message_Info::clear_has_room_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Message_Info::clear_room_id() {
  room_id_ = 0;
  clear_has_room_id();
}
inline ::google::protobuf::int32 Message_Info::room_id() const {
  return room_id_;
}
inline void Message_Info::set_room_id(::google::protobuf::int32 value) {
  set_has_room_id();
  room_id_ = value;
}

// optional string time = 9;
inline bool Message_Info::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Message_Info::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Message_Info::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Message_Info::clear_time() {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& Message_Info::time() const {
  return *time_;
}
inline void Message_Info::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Message_Info::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(value);
}
inline void Message_Info::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message_Info::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    time_ = new ::std::string;
  }
  return time_;
}
inline ::std::string* Message_Info::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message_Info::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool status = 10;
inline bool Message_Info::has_status() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Message_Info::set_has_status() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Message_Info::clear_has_status() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Message_Info::clear_status() {
  status_ = false;
  clear_has_status();
}
inline bool Message_Info::status() const {
  return status_;
}
inline void Message_Info::set_status(bool value) {
  set_has_status();
  status_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MessageData

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageData_2eproto__INCLUDED
