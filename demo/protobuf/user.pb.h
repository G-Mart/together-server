// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user.proto

#ifndef PROTOBUF_user_2eproto__INCLUDED
#define PROTOBUF_user_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "global.pb.h"
// @@protoc_insertion_point(includes)

namespace user {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_user_2eproto();
void protobuf_AssignDesc_user_2eproto();
void protobuf_ShutdownFile_user_2eproto();

class UserRequest;
class LoginResquest;
class UserResponse;
class LoginResponse;

enum UserRequest_RequestDataType {
  UserRequest_RequestDataType_LOGIN_RESQUEST = 1
};
bool UserRequest_RequestDataType_IsValid(int value);
const UserRequest_RequestDataType UserRequest_RequestDataType_RequestDataType_MIN = UserRequest_RequestDataType_LOGIN_RESQUEST;
const UserRequest_RequestDataType UserRequest_RequestDataType_RequestDataType_MAX = UserRequest_RequestDataType_LOGIN_RESQUEST;
const int UserRequest_RequestDataType_RequestDataType_ARRAYSIZE = UserRequest_RequestDataType_RequestDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserRequest_RequestDataType_descriptor();
inline const ::std::string& UserRequest_RequestDataType_Name(UserRequest_RequestDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserRequest_RequestDataType_descriptor(), value);
}
inline bool UserRequest_RequestDataType_Parse(
    const ::std::string& name, UserRequest_RequestDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserRequest_RequestDataType>(
    UserRequest_RequestDataType_descriptor(), name, value);
}
enum UserResponse_ResponseDataType {
  UserResponse_ResponseDataType_LOGIN_RESPONSE = 1
};
bool UserResponse_ResponseDataType_IsValid(int value);
const UserResponse_ResponseDataType UserResponse_ResponseDataType_ResponseDataType_MIN = UserResponse_ResponseDataType_LOGIN_RESPONSE;
const UserResponse_ResponseDataType UserResponse_ResponseDataType_ResponseDataType_MAX = UserResponse_ResponseDataType_LOGIN_RESPONSE;
const int UserResponse_ResponseDataType_ResponseDataType_ARRAYSIZE = UserResponse_ResponseDataType_ResponseDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* UserResponse_ResponseDataType_descriptor();
inline const ::std::string& UserResponse_ResponseDataType_Name(UserResponse_ResponseDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    UserResponse_ResponseDataType_descriptor(), value);
}
inline bool UserResponse_ResponseDataType_Parse(
    const ::std::string& name, UserResponse_ResponseDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UserResponse_ResponseDataType>(
    UserResponse_ResponseDataType_descriptor(), name, value);
}
// ===================================================================

class UserRequest : public ::google::protobuf::Message {
 public:
  UserRequest();
  virtual ~UserRequest();

  UserRequest(const UserRequest& from);

  inline UserRequest& operator=(const UserRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserRequest& default_instance();

  void Swap(UserRequest* other);

  // implements Message ----------------------------------------------

  UserRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserRequest& from);
  void MergeFrom(const UserRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UserRequest_RequestDataType RequestDataType;
  static const RequestDataType LOGIN_RESQUEST = UserRequest_RequestDataType_LOGIN_RESQUEST;
  static inline bool RequestDataType_IsValid(int value) {
    return UserRequest_RequestDataType_IsValid(value);
  }
  static const RequestDataType RequestDataType_MIN =
    UserRequest_RequestDataType_RequestDataType_MIN;
  static const RequestDataType RequestDataType_MAX =
    UserRequest_RequestDataType_RequestDataType_MAX;
  static const int RequestDataType_ARRAYSIZE =
    UserRequest_RequestDataType_RequestDataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RequestDataType_descriptor() {
    return UserRequest_RequestDataType_descriptor();
  }
  static inline const ::std::string& RequestDataType_Name(RequestDataType value) {
    return UserRequest_RequestDataType_Name(value);
  }
  static inline bool RequestDataType_Parse(const ::std::string& name,
      RequestDataType* value) {
    return UserRequest_RequestDataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .user.UserRequest.RequestDataType dataType = 1;
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDataTypeFieldNumber = 1;
  inline ::user::UserRequest_RequestDataType datatype() const;
  inline void set_datatype(::user::UserRequest_RequestDataType value);

  // optional .user.LoginResquest loginResquest = 2;
  inline bool has_loginresquest() const;
  inline void clear_loginresquest();
  static const int kLoginResquestFieldNumber = 2;
  inline const ::user::LoginResquest& loginresquest() const;
  inline ::user::LoginResquest* mutable_loginresquest();
  inline ::user::LoginResquest* release_loginresquest();
  inline void set_allocated_loginresquest(::user::LoginResquest* loginresquest);

  // @@protoc_insertion_point(class_scope:user.UserRequest)
 private:
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_loginresquest();
  inline void clear_has_loginresquest();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user::LoginResquest* loginresquest_;
  int datatype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static UserRequest* default_instance_;
};
// -------------------------------------------------------------------

class LoginResquest : public ::google::protobuf::Message {
 public:
  LoginResquest();
  virtual ~LoginResquest();

  LoginResquest(const LoginResquest& from);

  inline LoginResquest& operator=(const LoginResquest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResquest& default_instance();

  void Swap(LoginResquest* other);

  // implements Message ----------------------------------------------

  LoginResquest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResquest& from);
  void MergeFrom(const LoginResquest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:user.LoginResquest)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* username_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static LoginResquest* default_instance_;
};
// -------------------------------------------------------------------

class UserResponse : public ::google::protobuf::Message {
 public:
  UserResponse();
  virtual ~UserResponse();

  UserResponse(const UserResponse& from);

  inline UserResponse& operator=(const UserResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserResponse& default_instance();

  void Swap(UserResponse* other);

  // implements Message ----------------------------------------------

  UserResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserResponse& from);
  void MergeFrom(const UserResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef UserResponse_ResponseDataType ResponseDataType;
  static const ResponseDataType LOGIN_RESPONSE = UserResponse_ResponseDataType_LOGIN_RESPONSE;
  static inline bool ResponseDataType_IsValid(int value) {
    return UserResponse_ResponseDataType_IsValid(value);
  }
  static const ResponseDataType ResponseDataType_MIN =
    UserResponse_ResponseDataType_ResponseDataType_MIN;
  static const ResponseDataType ResponseDataType_MAX =
    UserResponse_ResponseDataType_ResponseDataType_MAX;
  static const int ResponseDataType_ARRAYSIZE =
    UserResponse_ResponseDataType_ResponseDataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ResponseDataType_descriptor() {
    return UserResponse_ResponseDataType_descriptor();
  }
  static inline const ::std::string& ResponseDataType_Name(ResponseDataType value) {
    return UserResponse_ResponseDataType_Name(value);
  }
  static inline bool ResponseDataType_Parse(const ::std::string& name,
      ResponseDataType* value) {
    return UserResponse_ResponseDataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .user.UserResponse.ResponseDataType dataType = 1;
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDataTypeFieldNumber = 1;
  inline ::user::UserResponse_ResponseDataType datatype() const;
  inline void set_datatype(::user::UserResponse_ResponseDataType value);

  // optional .user.LoginResponse loginResponse = 2;
  inline bool has_loginresponse() const;
  inline void clear_loginresponse();
  static const int kLoginResponseFieldNumber = 2;
  inline const ::user::LoginResponse& loginresponse() const;
  inline ::user::LoginResponse* mutable_loginresponse();
  inline ::user::LoginResponse* release_loginresponse();
  inline void set_allocated_loginresponse(::user::LoginResponse* loginresponse);

  // @@protoc_insertion_point(class_scope:user.UserResponse)
 private:
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_loginresponse();
  inline void clear_has_loginresponse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::user::LoginResponse* loginresponse_;
  int datatype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static UserResponse* default_instance_;
};
// -------------------------------------------------------------------

class LoginResponse : public ::google::protobuf::Message {
 public:
  LoginResponse();
  virtual ~LoginResponse();

  LoginResponse(const LoginResponse& from);

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginResponse& default_instance();

  void Swap(LoginResponse* other);

  // implements Message ----------------------------------------------

  LoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginResponse& from);
  void MergeFrom(const LoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .global.ResponseBase base = 1;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 1;
  inline const ::global::ResponseBase& base() const;
  inline ::global::ResponseBase* mutable_base();
  inline ::global::ResponseBase* release_base();
  inline void set_allocated_base(::global::ResponseBase* base);

  // optional .global.ModuleType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::global::ModuleType type() const;
  inline void set_type(::global::ModuleType value);

  // optional .global.Result result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::global::Result result() const;
  inline void set_result(::global::Result value);

  // @@protoc_insertion_point(class_scope:user.LoginResponse)
 private:
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::global::ResponseBase* base_;
  int type_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_user_2eproto();
  friend void protobuf_AssignDesc_user_2eproto();
  friend void protobuf_ShutdownFile_user_2eproto();

  void InitAsDefaultInstance();
  static LoginResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// UserRequest

// optional .user.UserRequest.RequestDataType dataType = 1;
inline bool UserRequest::has_datatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserRequest::set_has_datatype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserRequest::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserRequest::clear_datatype() {
  datatype_ = 1;
  clear_has_datatype();
}
inline ::user::UserRequest_RequestDataType UserRequest::datatype() const {
  return static_cast< ::user::UserRequest_RequestDataType >(datatype_);
}
inline void UserRequest::set_datatype(::user::UserRequest_RequestDataType value) {
  assert(::user::UserRequest_RequestDataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
}

// optional .user.LoginResquest loginResquest = 2;
inline bool UserRequest::has_loginresquest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserRequest::set_has_loginresquest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserRequest::clear_has_loginresquest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserRequest::clear_loginresquest() {
  if (loginresquest_ != NULL) loginresquest_->::user::LoginResquest::Clear();
  clear_has_loginresquest();
}
inline const ::user::LoginResquest& UserRequest::loginresquest() const {
  return loginresquest_ != NULL ? *loginresquest_ : *default_instance_->loginresquest_;
}
inline ::user::LoginResquest* UserRequest::mutable_loginresquest() {
  set_has_loginresquest();
  if (loginresquest_ == NULL) loginresquest_ = new ::user::LoginResquest;
  return loginresquest_;
}
inline ::user::LoginResquest* UserRequest::release_loginresquest() {
  clear_has_loginresquest();
  ::user::LoginResquest* temp = loginresquest_;
  loginresquest_ = NULL;
  return temp;
}
inline void UserRequest::set_allocated_loginresquest(::user::LoginResquest* loginresquest) {
  delete loginresquest_;
  loginresquest_ = loginresquest;
  if (loginresquest) {
    set_has_loginresquest();
  } else {
    clear_has_loginresquest();
  }
}

// -------------------------------------------------------------------

// LoginResquest

// optional string username = 1;
inline bool LoginResquest::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResquest::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResquest::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResquest::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& LoginResquest::username() const {
  return *username_;
}
inline void LoginResquest::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginResquest::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void LoginResquest::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResquest::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* LoginResquest::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResquest::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string password = 2;
inline bool LoginResquest::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResquest::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResquest::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResquest::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& LoginResquest::password() const {
  return *password_;
}
inline void LoginResquest::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginResquest::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void LoginResquest::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginResquest::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* LoginResquest::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginResquest::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserResponse

// optional .user.UserResponse.ResponseDataType dataType = 1;
inline bool UserResponse::has_datatype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserResponse::set_has_datatype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserResponse::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserResponse::clear_datatype() {
  datatype_ = 1;
  clear_has_datatype();
}
inline ::user::UserResponse_ResponseDataType UserResponse::datatype() const {
  return static_cast< ::user::UserResponse_ResponseDataType >(datatype_);
}
inline void UserResponse::set_datatype(::user::UserResponse_ResponseDataType value) {
  assert(::user::UserResponse_ResponseDataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
}

// optional .user.LoginResponse loginResponse = 2;
inline bool UserResponse::has_loginresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserResponse::set_has_loginresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserResponse::clear_has_loginresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserResponse::clear_loginresponse() {
  if (loginresponse_ != NULL) loginresponse_->::user::LoginResponse::Clear();
  clear_has_loginresponse();
}
inline const ::user::LoginResponse& UserResponse::loginresponse() const {
  return loginresponse_ != NULL ? *loginresponse_ : *default_instance_->loginresponse_;
}
inline ::user::LoginResponse* UserResponse::mutable_loginresponse() {
  set_has_loginresponse();
  if (loginresponse_ == NULL) loginresponse_ = new ::user::LoginResponse;
  return loginresponse_;
}
inline ::user::LoginResponse* UserResponse::release_loginresponse() {
  clear_has_loginresponse();
  ::user::LoginResponse* temp = loginresponse_;
  loginresponse_ = NULL;
  return temp;
}
inline void UserResponse::set_allocated_loginresponse(::user::LoginResponse* loginresponse) {
  delete loginresponse_;
  loginresponse_ = loginresponse;
  if (loginresponse) {
    set_has_loginresponse();
  } else {
    clear_has_loginresponse();
  }
}

// -------------------------------------------------------------------

// LoginResponse

// optional .global.ResponseBase base = 1;
inline bool LoginResponse::has_base() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginResponse::set_has_base() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginResponse::clear_has_base() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginResponse::clear_base() {
  if (base_ != NULL) base_->::global::ResponseBase::Clear();
  clear_has_base();
}
inline const ::global::ResponseBase& LoginResponse::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::global::ResponseBase* LoginResponse::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::global::ResponseBase;
  return base_;
}
inline ::global::ResponseBase* LoginResponse::release_base() {
  clear_has_base();
  ::global::ResponseBase* temp = base_;
  base_ = NULL;
  return temp;
}
inline void LoginResponse::set_allocated_base(::global::ResponseBase* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .global.ModuleType type = 2;
inline bool LoginResponse::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginResponse::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginResponse::clear_type() {
  type_ = 100;
  clear_has_type();
}
inline ::global::ModuleType LoginResponse::type() const {
  return static_cast< ::global::ModuleType >(type_);
}
inline void LoginResponse::set_type(::global::ModuleType value) {
  assert(::global::ModuleType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .global.Result result = 3;
inline bool LoginResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginResponse::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::global::Result LoginResponse::result() const {
  return static_cast< ::global::Result >(result_);
}
inline void LoginResponse::set_result(::global::Result value) {
  assert(::global::Result_IsValid(value));
  set_has_result();
  result_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user::UserRequest_RequestDataType>() {
  return ::user::UserRequest_RequestDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::user::UserResponse_ResponseDataType>() {
  return ::user::UserResponse_ResponseDataType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_user_2eproto__INCLUDED
